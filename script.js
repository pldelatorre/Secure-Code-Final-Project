const gameContainer = document.getElementById('game');
const restartButton = document.getElementById('reset-btn');
const cardImages = [
    'pictures/catjpg.jpg', 'pictures/catjpg.jpg',
    'pictures/batpng.png', 'pictures/batpng.png',
    'pictures/cow.jpg', 'pictures/cow.jpg',
    'pictures/giraffjpg.jpg', 'pictures/giraffjpg.jpg',
    'pictures/lionjpg.jpg', 'pictures/lionjpg.jpg',
    'pictures/otterpng.png', 'pictures/otterpng.png',
    'pictures/panda.png', 'pictures/panda.png',
    'pictures/rabbit.png', 'pictures/rabbit.png',
    'pictures/snakepng.png', 'pictures/snakepng.png',
    'pictures/squirallpng.png', 'pictures/squirallpng.png'
];

let card1 = null;
let card2 = null;
let lockBoard = false;
let matchedCards = 0;
let highscoreNames = [];
let highscoreScores = [];

// Shuffle function
function shuffle(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
}

// Create the cards
function createCards() {
    shuffle(cardImages);
    cardImages.forEach(image => {
        const card = document.createElement('li');
        card.classList.add('card');
        card.innerHTML = `<img src="${image}" alt="Card Image">`;
        card.addEventListener('click', flipCard);
        gameContainer.appendChild(card);
    });
}

// flip function
function flipCard() {
    if (lockBoard) return;
    if (this === card1) return;

    this.classList.add('flipped');

    if (!card1) {
        card1 = this;
        return;
    }

    card2 = this;
    lockBoard = true;
    checkForMatch();
}

// Check for match
function checkForMatch() {
    const isMatch = card1.innerHTML === card2.innerHTML;

    if (isMatch) {
        matchedCards += 2;
        card1.classList.add('matched');
        card2.classList.add('matched');
        resetBoard();
    } else {
        setTimeout(() => {
            card1.classList.remove('flipped');
            card2.classList.remove('flipped');
            resetBoard();
        }, 1000);
    }
}

// Reset the board
function resetBoard() {
    [card1, card2, lockBoard] = [null, null, false];
    if (matchedCards === cardImages.length) {
        setTimeout(() => {
            alert("You've won!");
            // Show the highscore form (new addition)
            document.getElementById('highscore-form').style.display = 'block';
        }, 500);
    }
}

// Restart the game
function restartGame() {
    gameContainer.innerHTML = '';
    matchedCards = 0;
    highscoreNames = []; // Clear high scores
    highscoreScores = [];
    document.getElementById('highscore-form').style.display = 'none'; // Hide form on restart
    document.getElementById('highscores-list').innerHTML = ''; // Clear displayed highscores
    createCards();
}

// Event listener for the restart button
restartButton.addEventListener('click', restartGame);

// Initial game setup
createCards();

// Hypothetical Highscore Submission (VULNERABLE!)
document.getElementById('highscore-form').addEventListener('submit', (event) => {
    event.preventDefault(); // Prevent default form submission

    const playerName = document.getElementById('player-name').value;
    const score = matchedCards / 2; // Calculate score (number of pairs)

    // ***VULNERABILITY 1: Client-Side Validation Failure***
    // The code doesn't properly validate the player's name. A malicious user could enter a very long name, or special characters, potentially causing issues on the server-side (if this were sent to a server).
    if (playerName.length > 50) { // Example of client-side validation (Snyk might not flag this directly, but it's related)
        alert("Name is too long!");
        return;
    }
    if (playerName.includes("<script>")) {
        alert("Invalid characters in name!");
        return;
    }


    // ***VULNERABILITY 2:  Lack of Output Encoding/Improper Handling of Player Name (XSS)***
    // Imagine this: The playerName is used *later* to display a "High Scores" list on the page.  If that list is generated by the server, and the server doesn't properly *encode* the playerName before inserting it into the HTML, we have an XSS vulnerability.
    // For example, if a player entered:  `<script>alert('XSS')</script>` as their name.
    // Snyk is very good at detecting XSS, especially if a framework like React/Angular/Vue is used, or if a templating engine is used on the server.  It can often trace data flow.
    highscoreNames.push(playerName);
    highscoreScores.push(score);
    displayHighscores(highscoreNames, highscoreScores); // Call the vulnerable function

    // ***VULNERABILITY 3: Insecure Data Handling (if localStorage is used)***
    //  Imagine we store the score in localStorage *before* sending to a server.
    //  localStorage is easily editable by the user.  They could modify their score before submission.
    localStorage.setItem('highscore_name', playerName);
    localStorage.setItem('highscore_score', score);

    // ***VULNERABILITY 4: (Related to #3) - No Integrity Check on Client-Side Data***
    // If the server receives the score from the client (either directly from the form, or from localStorage as imagined above), and the server doesn't *independently verify* the score, then the server is trusting potentially tampered data.  A malicious user could use their browser's developer tools to change the score in localStorage, and the server would save the fake score.

    // Simulate sending data to a server (in a real app, you'd use fetch or similar)
    console.log(`Sending high score: Name = ${playerName}, Score = ${score}`);
    // In a real application, you would send this data to a server using an API call (e.g., fetch).
    // fetch('https://api.example.com/highscore', {  // Different domain
    //     method: 'POST',
    //     body: JSON.stringify({ playerName, score }),
    //     headers: { 'Content-Type': 'application/json' }
    // })
    // .then(response => {
    //    // ...
    // });

    // For this example, we'll just display a message:
    alert(`High score submitted! Name: ${playerName}, Score: ${score}`);
    //  Hide the form again
    document.getElementById('highscore-form').style.display = 'none';
    //  Restart the game?
    restartGame(); //  Added restartGame() call here.
});
